/**
 */
package org.nasdanika.models.app.processors;

import java.util.function.BiConsumer;

import org.nasdanika.common.Context;
import org.nasdanika.common.ProgressMonitor;
import org.nasdanika.graph.processor.NodeProcessorConfig;
import org.nasdanika.models.app.Action;
import org.nasdanika.models.app.AppPackage;
import org.nasdanika.models.app.Label;
import org.nasdanika.models.app.graph.WidgetFactory;
import org.nasdanika.models.ecore.graph.processors.EClassNodeProcessor;
import org.nasdanika.models.ecore.graph.processors.EClassifierNodeProcessorFactory;
import org.nasdanika.models.ecore.graph.processors.EReferenceNodeProcessor;
import org.nasdanika.models.ecore.graph.processors.EStructuralFeatureNodeProcessorFactory;

@EClassifierNodeProcessorFactory(classifierID = AppPackage.LABEL)
public class LabelProcessorFactory {
	
	protected Context context;

	public LabelProcessorFactory(Context context) {
		this.context = context;
	}
	
	@EClassifierNodeProcessorFactory(
			description = "",
			documentation = 
                    """
					Label is a text and an icon with a tooltip, notification badge, and help dialog.
					Labels can have children. Label is a base class for Link.
                    """
	)
	public EClassNodeProcessor createEClassifierProcessor(
			NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
			java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
			BiConsumer<Label, ProgressMonitor> labelConfigurator,
			ProgressMonitor progressMonitor) {		
		return new EClassNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}	
			
		};
	}

	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__ID,
		description = "Unique label ID, autogenerated by default"
	)
	public EReferenceNodeProcessor createIdProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}
	
	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__TEXT,
		description = "Label text")
	public EReferenceNodeProcessor createTextProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}
	
	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__ICON,
		description = "Label icon",
		documentation = 
		        """
                Label icon it treated as URL if contains ``/`` or as a CSS class otherwise. 
                E.g. ``fas fa-wrench`` would be treated as a CSS class.				
				""")
	public EReferenceNodeProcessor createIconProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}
	
	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__TOOLTIP,
		description = "Label tooltip")
	public EReferenceNodeProcessor createTooltipProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}
	
	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__OUTLINE,
		description = "For some label representations specifies that the label shall be displayed as an outline instead of a solid fill")
	public EReferenceNodeProcessor createOutlineProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}
	
	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__NOTIFICATION,
		description = "Notification to display next to the label. E.g. a number of new messages in an inbox.")
	public EReferenceNodeProcessor createNotificationProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}
	
	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__CHILDREN,
		description = "Label children to build UI elements like trees, lists, navigation bars and drop-downs")
	public EReferenceNodeProcessor createChildrenProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}
	
	@EStructuralFeatureNodeProcessorFactory(
		nsURI = AppPackage.eNS_URI,
		classID = AppPackage.LABEL,
		featureID = AppPackage.LABEL__DECORATOR,
		description = "Decorator label or link",
		documentation = 
		        """
                If decorator label or link is present it is rendered next to the containing label.
                For example, a help icon with a tooltip, link, or modal.				
				""")
	public EReferenceNodeProcessor createDecoratorProcessor(
		NodeProcessorConfig<WidgetFactory, WidgetFactory> config, 
		java.util.function.Function<ProgressMonitor, Action> prototypeProvider,
		BiConsumer<Label, ProgressMonitor> labelConfigurator,
		ProgressMonitor progressMonitor) {		
		return new EReferenceNodeProcessor(config, context, prototypeProvider) {
			
			@Override
			public void configureLabel(Object source, Label label, ProgressMonitor progressMonitor) {
				super.configureLabel(source, label, progressMonitor);
				if (labelConfigurator != null) {
					labelConfigurator.accept(label, progressMonitor);
				}
			}
			
		};
	}

} // Label
